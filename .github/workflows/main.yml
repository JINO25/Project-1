name: CI Pipeline

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main, production ]

jobs:
  node-test:
    name: üîß Node.js Unit Test
    runs-on: ubuntu-latest

    env:
      NODE_ENV: ${{ secrets.NODE_ENV }}
      PORT: ${{ secrets.PORT }}
      LIMITPAGE: ${{ secrets.LIMITPAGE }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      DATABASE: ${{ secrets.DATABASE }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_EXPIRIES: ${{ secrets.JWT_EXPIRIES }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      S_EMAIL: ${{ secrets.S_EMAIL }}
      S_PASS: ${{ secrets.S_PASS }}
      API_KEY: ${{ secrets.API_KEY }}
      SENDINBLUE_HOST: ${{ secrets.SENDINBLUE_HOST }}
      SENDINBLUE_PORT: ${{ secrets.SENDINBLUE_PORT }}
      SENDINBLUE_LOGIN: ${{ secrets.SENDINBLUE_LOGIN }}
      SENDINBLUE_PASSWORD: ${{ secrets.SENDINBLUE_PASSWORD }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
      GgClient_ID: ${{ secrets.GgClient_ID }}
      GgClient_Secret: ${{ secrets.GgClient_Secret }}
      Cloudinary_NAME: ${{ secrets.Cloudinary_NAME }}
      Cloudinary_API: ${{ secrets.Cloudinary_API }}
      Cloudinary_SECRET: ${{ secrets.Cloudinary_SECRET }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build project (n·∫øu c√≥)
        run: npm run build --if-present

      - name: ‚úÖ Run tests (n·∫øu c√≥ test script)
        run: npm run test --if-present

  docker-build-test:
    name: üê≥ Build & Test Docker
    runs-on: ubuntu-latest
    needs: node-test  # Ch·∫°y sau khi test Node.js xong

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Build Docker image
        run: docker build -t tour-app:ci .

      - name: üöÄ Run container (test mode)
        run: |
          docker run --rm \
            -e NODE_ENV=${{ secrets.NODE_ENV }} \
            -e PORT=${{ secrets.PORT }} \
            -e LIMITPAGE=${{ secrets.LIMITPAGE }} \
            -e USERNAME=${{ secrets.USERNAME }} \            
            -e DATABASE=${{ secrets.DATABASE }} \
            -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            -e JWT_EXPIRIES=${{ secrets.JWT_EXPIRIES }} \
            -e SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
            -e EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }} \
            -e EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
            -e EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
            -e EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
            -e EMAIL_FROM=${{ secrets.EMAIL_FROM }} \
            -e S_EMAIL=${{ secrets.S_EMAIL }} \
            -e S_PASS=${{ secrets.S_PASS }} \
            -e API_KEY=${{ secrets.API_KEY }} \
            -e SENDINBLUE_HOST=${{ secrets.SENDINBLUE_HOST }} \
            -e SENDINBLUE_PORT=${{ secrets.SENDINBLUE_PORT }} \
            -e SENDINBLUE_LOGIN=${{ secrets.SENDINBLUE_LOGIN }} \
            -e SENDINBLUE_PASSWORD=${{ secrets.SENDINBLUE_PASSWORD }} \
            -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            -e STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }} \
            -e GgClient_ID=${{ secrets.GgClient_ID }} \
            -e GgClient_Secret=${{ secrets.GgClient_Secret }} \
            -e Cloudinary_NAME=${{ secrets.Cloudinary_NAME }} \
            -e Cloudinary_API=${{ secrets.Cloudinary_API }} \
            -e Cloudinary_SECRET=${{ secrets.Cloudinary_SECRET }} \
            -e PASSWORD=${{ secrets.PASSWORD }} \
            tour-app:ci npm test
